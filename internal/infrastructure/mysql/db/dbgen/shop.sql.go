// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: shop.sql

package dbgen

import (
	"context"
	"strings"
)

const shopFetch = `-- name: ShopFetch :many
SELECT
   id, name, description, latitude, longitude, created_at, updated_at
FROM
  shop
`

func (q *Queries) ShopFetch(ctx context.Context) ([]Shop, error) {
	rows, err := q.db.QueryContext(ctx, shopFetch)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Shop{}
	for rows.Next() {
		var i Shop
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Latitude,
			&i.Longitude,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const shopFindById = `-- name: ShopFindById :one
SELECT
   id, name, description, latitude, longitude, created_at, updated_at
FROM
   shop
WHERE
   id = ?
`

func (q *Queries) ShopFindById(ctx context.Context, id string) (Shop, error) {
	row := q.db.QueryRowContext(ctx, shopFindById, id)
	var i Shop
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Latitude,
		&i.Longitude,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const shopFindByIds = `-- name: ShopFindByIds :many
SELECT
   id, name, description, latitude, longitude, created_at, updated_at
FROM
   shop
WHERE
   id IN (/*SLICE:ids*/?)
`

func (q *Queries) ShopFindByIds(ctx context.Context, ids []string) ([]Shop, error) {
	query := shopFindByIds
	var queryParams []interface{}
	if len(ids) > 0 {
		for _, v := range ids {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:ids*/?", strings.Repeat(",?", len(ids))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:ids*/?", "NULL", 1)
	}
	rows, err := q.db.QueryContext(ctx, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Shop{}
	for rows.Next() {
		var i Shop
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Latitude,
			&i.Longitude,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const upsertShop = `-- name: UpsertShop :exec
INSERT INTO shop (
   id,
   name,
   description,
   latitude,
   longitude
) VALUES (
   ?,
   ?,
   ?,
   ?,
   ?
) ON DUPLICATE KEY UPDATE
   name = ?,
   description = ?,
   latitude = ?,
   longitude = ?
`

type UpsertShopParams struct {
	ID          string `json:"id"`
	Name        string `json:"name"`
	Description string `json:"description"`
	Latitude    string `json:"latitude"`
	Longitude   string `json:"longitude"`
}

func (q *Queries) UpsertShop(ctx context.Context, arg UpsertShopParams) error {
	_, err := q.db.ExecContext(ctx, upsertShop,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Latitude,
		arg.Longitude,
		arg.Name,
		arg.Description,
		arg.Latitude,
		arg.Longitude,
	)
	return err
}
